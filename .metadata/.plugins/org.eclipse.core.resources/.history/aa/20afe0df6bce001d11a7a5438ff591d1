package com.entregamercadoria.log.api.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.entregamercadoria.log.domain.model.Cliente;
import com.entregamercadoria.log.domain.repository.ClienteRepository;
import com.entregamercadoria.log.domain.service.CatalogoClienteService;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/clientes")
public class ClienteController {

	private ClienteRepository clienteRepository;
	private CatalogoClienteService catalogoClienteService;

	@GetMapping //Listar Clientes
	public List<Cliente> listar() {
		return clienteRepository.findAll();
	}

	@GetMapping("/{clienteId}") //Busca cliente por ID
	public ResponseEntity<Cliente> buscarId(@PathVariable Long clienteId) {
		return clienteRepository.findById(clienteId)
			  .map(ResponseEntity::ok)
			  .orElse(ResponseEntity.notFound().build());
	}
	
	@PostMapping //Adicionar Cliente
	@ResponseStatus(HttpStatus.CREATED)
	public Cliente adicionar(@Valid @RequestBody Cliente cliente) {
		//SEM REGRA DE NEGÓCIO: return clienteRepository.save(cliente);
		//COM REGRA DE NEGÓCIO ESPECIFICADA NO CATALOGODECLIENTES:
		return catalogoClienteService.salvarCliente(cliente);
	}
	
	@PutMapping("/{clienteId}") //Atualizar Cliente
	public ResponseEntity<Cliente> atualizar(@Valid @PathVariable Long clienteId,
		   @RequestBody Cliente cliente) {
		
		if(!clienteRepository.existsById(clienteId)){
			return ResponseEntity.notFound().build();
		}
		cliente.setId(clienteId);
		//Sem Regra de Negócio: cliente = clienteRepository.save(cliente);
		cliente = catalogoClienteService.salvarCliente(cliente);
		
		return ResponseEntity.ok(cliente);
	}
	

	@DeleteMapping("/{clienteId}") //Excluir Cliente
	public ResponseEntity<Void> deletar(@PathVariable Long clienteId){
		if(!clienteRepository.existsById(clienteId)){
			return ResponseEntity.notFound().build();
		}
		//Sem RGn = regra de negócio
		//clienteRepository.deleteById(clienteId);
		//Com RRn:
		catalogoClienteService.excluirCliente(clienteId);
		
		return ResponseEntity.noContent().build();
	}
}
